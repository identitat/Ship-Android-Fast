/*
 *     Copyright (c) 2015-present Victor Hidalgo Lorenzo
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.fernandocejas.frodo'
apply plugin: 'com.frogermcs.dagger2metrics'


//apply plugin: 'com.google.gms.google-services'
//apply plugin: 'io.fabric'

android {

  compileSdkVersion rootProject.ext.androidCompileSdkVersion
  buildToolsVersion rootProject.ext.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion rootProject.ext.androidMinSdkVersion
    targetSdkVersion rootProject.ext.androidTargetSdkVersion

    applicationId rootProject.ext.androidApplicationId
    versionCode rootProject.ext.androidVersionCode
    versionName rootProject.ext.androidVersionName
    testInstrumentationRunner rootProject.ext.testInstrumentationRunner
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  lintOptions {
    quiet true
    abortOnError false
    ignoreWarnings true
  }

  signingConfigs {
    release {
      def props = new Properties()
      props.load(
          new FileInputStream(rootProject.file("config/buildsystem/release.properties")))

      storeFile file(props.keyStore)
      storePassword props.keyStorePassword
      keyAlias props.keyAlias
      keyPassword props.keyAliasPassword
    }
  }

  buildTypes {
    debug {

      def type = rootProject.ext.debug
      applicationIdSuffix '.debug'
      buildConfigField "String", "API_URL", type.apiUrl
      minifyEnabled false
    }

    stage {

      def type = rootProject.ext.stage
      applicationIdSuffix '.stage'
      buildConfigField "String", "API_URL", type.apiUrl
      minifyEnabled true
      debuggable true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-stage.pro'
      signingConfig signingConfigs.debug
    }

    release {

      def type = rootProject.ext.prod
      buildConfigField "String", "API_URL", type.apiUrl
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
    }
  }

  productFlavors {
    free {
      def flavour = rootProject.ext.free

      buildConfigField "boolean", "FEATURE_A", flavour.featureA
    }
    paid {
      def flavour = rootProject.ext.paid

      buildConfigField "boolean", "FEATURE_A", flavour.featureA
    }
  }
}

repositories {
  jcenter()
  maven { url "https://clojars.org/repo/" }
}

dependencies {

  def appDependencies = rootProject.ext.appDependencies
  def appTestDependencies = rootProject.ext.appTestDependencies

  compile project(':domain')
  compile project(':data')
  compile project(':commons')

  apt appDependencies.daggerCompiler
  compile appDependencies.dagger

  provided appDependencies.javaxAnnotation

  compile appDependencies.support
  compile appDependencies.appcompat
  compile appDependencies.design
  compile appDependencies.recyclerView
  compile appDependencies.cards
  compile appDependencies.timber
  compile appDependencies.activityOnCrash
  compile appDependencies.glide
  compile appDependencies.butterKnife
  compile appDependencies.rxJava
  compile appDependencies.rxAndroid
  compile appDependencies.analyticsServices
  compile appDependencies.okhttpGlideInteg

  apt appDependencies.autoValue
  provided appDependencies.autoValue
  apt appDependencies.autoValueParcel

  compile appDependencies.icepick
  apt appDependencies.icepickProc

  debugCompile appDependencies.leakcanaryDebug
  stageCompile appDependencies.leakcanaryRelease
  releaseCompile appDependencies.leakcanaryRelease

  testCompile appTestDependencies.junit
  testCompile appTestDependencies.assertj
  testCompile appTestDependencies.robolectric

  androidTestCompile appTestDependencies.mockito
  androidTestCompile appTestDependencies.dexmaker
  androidTestCompile appTestDependencies.dexmakerMockito

  androidTestCompile(appTestDependencies.runner) {
    exclude module: 'support-annotations'
    exclude module: 'recyclerview-v7'
    exclude module: 'support-v4'
  }
  androidTestCompile(appTestDependencies.rules) {
    exclude module: 'support-annotations'
    exclude module: 'recyclerview-v7'
    exclude module: 'support-v4'
  }
  androidTestCompile(appTestDependencies.espresso) {
    exclude module: 'support-annotations'
    exclude module: 'recyclerview-v7'
    exclude module: 'support-v4'
  }
  androidTestCompile(appTestDependencies.espressoContrib) {
    exclude module: 'support-annotations'
    exclude module: 'recyclerview-v7'
    exclude module: 'support-v4'
  }
}